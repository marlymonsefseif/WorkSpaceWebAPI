// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkSpaceWebAPI.Models;

#nullable disable

namespace WorkSpaceWebAPI.Migrations
{
    [DbContext(typeof(WorkSpaceDbContext))]
    [Migration("20250421205052_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WorkSpaceWebAPI.Models.Spaces", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("AvailableFrom")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("AvailableTo")
                        .HasColumnType("time");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("SpaceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Spaces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableFrom = new TimeSpan(0, 8, 0, 0, 0),
                            AvailableTo = new TimeSpan(0, 16, 0, 0, 0),
                            Capacity = 50,
                            Description = "Room To Study",
                            IsAvailable = true,
                            Name = "StudyRoom 1",
                            PricePerHour = 20m,
                            SpaceType = 0
                        },
                        new
                        {
                            Id = 2,
                            AvailableFrom = new TimeSpan(0, 9, 0, 0, 0),
                            AvailableTo = new TimeSpan(0, 17, 0, 0, 0),
                            Capacity = 30,
                            Description = "Lab for practice",
                            IsAvailable = true,
                            Name = "ITI Lab",
                            PricePerHour = 25m,
                            SpaceType = 3
                        },
                        new
                        {
                            Id = 3,
                            AvailableFrom = new TimeSpan(0, 10, 0, 0, 0),
                            AvailableTo = new TimeSpan(0, 14, 0, 0, 0),
                            Capacity = 10,
                            Description = "Team meetings",
                            IsAvailable = false,
                            Name = "Meeting Room A",
                            PricePerHour = 15m,
                            SpaceType = 1
                        },
                        new
                        {
                            Id = 4,
                            AvailableFrom = new TimeSpan(0, 9, 0, 0, 0),
                            AvailableTo = new TimeSpan(0, 18, 0, 0, 0),
                            Capacity = 100,
                            Description = "Events and workshops",
                            IsAvailable = true,
                            Name = "Workshop Hall",
                            PricePerHour = 50m,
                            SpaceType = 2
                        },
                        new
                        {
                            Id = 5,
                            AvailableFrom = new TimeSpan(0, 7, 0, 0, 0),
                            AvailableTo = new TimeSpan(0, 22, 0, 0, 0),
                            Capacity = 20,
                            Description = "For focused study",
                            IsAvailable = true,
                            Name = "Silent Study Room",
                            PricePerHour = 10m,
                            SpaceType = 0
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
